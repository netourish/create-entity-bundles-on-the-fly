<?php

/**
 * @file
 * Describe the entity with interface for managing bundles.
 */

/**
 * Implements hook_permission().
 */
function travel_permission() {
  $permissions = array(
    'view travel content' => array(
      'title' => t('View Typical Entity Example content'),
    ),
    'administer travel content' => array(
      'title' => t('Administer Typical Entity Example content'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_entity_info().
 */
function travel_entity_info() {
  $info = array(
    'travel' => array(
      'label' => t('Travel 6'),
      'base table' => 'travel',
      'entity keys' => array(
        'id' => 'tid',
        'bundle' => 'type',
        'label' => 'transport',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'entity class' => 'Entity',
      'controller class' => 'TravelController',
      'metadata controller class' => '',
      'fieldable' => TRUE,
      'uri callback' => 'travel_uri',
      'label callback' => 'entity_class_label',
    ),
  );
  $info['travel_type'] = array(
    'label' => t('Travel 6 Type'),
    'base table' => 'travel_type',
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'bundle of' => 'travel',  //  Entity types can be used as bundles for other entity types.
    'entity class' => 'Entity',
    'controller class' => 'TravelTypeController',  //  Default is EntityAPIController but here the save methods has to be overridden for updating the menu registery.
    'metadata controller class' => '',
    'fieldable' => FALSE,
    'module' => 'travel',
    'admin ui' => array(  //  Interface for managing the entity bundles.
      'path' => 'admin/structure/travel',
      'file' => 'travel.admin.inc',
      'controller class' => 'TravelTypeUiController',  //  Default is EntityDefaultUIController but this is customized for adding the default menu items provided by entity for types of default.
    ),
    'access callback' => 'travel_type_access',  //  Access callback is required when working with admin UI.
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function travel_entity_property_info() {
  $info = array();

  // Describe properties of entity.
  $properties = &$info['travel']['properties'];

  $properties['tid'] = array(
    'type' => 'integer',
    'schema field' => 'tid',
    'label' => t('Travel Entity ID'),
  );
  $properties['type'] = array(
    'type' => 'text',
    'schema field' => 'type',
    'required' => TRUE,
    'label' => t('Entity Bundle Type'),
  );
  $properties['transport'] = array(
    'type' => 'text',
    'schema field' => 'transport',
    'required' => TRUE,
    'label' => t('Transport:'),
  );
  $properties['source_from'] = array(
    'type' => 'text',
    'schema field' => 'source_from',
    'required' => TRUE,
    'label' => t('Source From:'),
  );
  $properties['destination_to'] = array(
    'type' => 'text',
    'schema field' => 'destination_to',
    'required' => TRUE,
    'label' => t('Destination To:'),
  );

  // Describe properties of entity type.
  $type_properties = &$info['travel_type']['properties'];
  $type_properties['id'] = array(
    'type' => 'integer',
    'schema field' => 'id',
    'label' => t('Type ID'),
  );
  $type_properties['type'] = array(
    'type' => 'text',
    'schema field' => 'type',
    'required' => TRUE,
    'label' => t('Type name'),
  );
  $type_properties['label'] = array(
    'type' => 'text',
    'schema field' => 'label',
    'required' => TRUE,
    'label' => t('Type label'),
  );
  $type_properties['description'] = array(
    'type' => 'text',
    'schema field' => 'description',
    'required' => TRUE,
    'label' => t('Type description'),
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 * 
 * Specify admin pages for all existing entity bundles.
 */
function travel_entity_info_alter(&$entity_info) {
  foreach (travel_type_load_multiple() as $type => $info) {
    $entity_info['travel']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/travel/manage/%travel_type',
        'real path' => 'admin/structure/travel/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements entity_uri()
 */
function travel_uri($travel) {
    return array(
      'path' => 'travel/' . $travel->tid,
    );
}

/**
 * Load an instance of travel.
 * 
 * @param int $id
 *   Entity identifier.
 * @param bool $reset
 *   Whether to reset the internal cache for travel.
 * 
 * @return mixed
 *   An actual entity, or false.
 */
function travel_load($id, $reset = FALSE) {
  $entities = travel_load_multiple(array($id), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple instances of travel.
 * 
 * @param array $ids
 *   Entity identifiers.
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the base entity table.
 * @param bool $reset
 *   Whether to reset the internal cache for travel.
 * 
 * @return array
 *   Founded entities.
 */
function travel_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('travel', $ids, $conditions, $reset);
}

/**
 * Load an instance of travel_type.
 * 
 * @param string $entity_type
 *   Name of the entity type to load.
 * 
 * @return mixed
 *   Founded entity type, or false.
 */
function travel_type_load($entity_type) {
  return travel_type_load_multiple($entity_type);
}

/**
 * Load multiple instances of travel_type.
 * 
 * @param string $type_name
 *   Name of the entity type to load.
 * 
 * @return mixed
 *   Founded entity type, or false.
 */
function travel_type_load_multiple($type_name = NULL) {
  $types = entity_load_multiple_by_name('travel_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Implements hook_menu().
 */
function travel_menu() {
  $items = array();

  // Base URI for dealing with entity.
  $base_uri = 'travel/%travel';
  $base_uri_argument_position = 1;

  // URI for choosing bundle of entity to add.
  $items['travel/add'] = array(
    'title' => 'Add Travel 6',
    'page callback' => 'travel_choose_bundle',
    'access arguments' => array('administer travel content'),
    'file' => 'travel.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // URI for adding entity of proper bundle.
  foreach (travel_type_load_multiple() as $type => $info) {
    $items['travel/add/' . $type] = array(
      'title' => 'Add Travel 6',
      'page callback' => 'travel_add',
      'page arguments' => array(2),
      'access arguments' => array('administer travel content'),
      'file' => 'travel.admin.inc',
    );
  }

  // URI for viewing entity instances.
  $items[$base_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('travel', $base_uri_argument_position),
    'page callback' => 'travel_view',
    'page arguments' => array($base_uri_argument_position),
    'access arguments' => array('view travel content'),
    'file' => 'travel.pages.inc',
  );
  $items[$base_uri . '/view'] = array(
    'title' => 'View Travel 6',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // URI for editing entity instances.
  $items[$base_uri . '/edit'] = array(
    'title' => 'Edit Travel 6',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('travel_form', $base_uri_argument_position),
    'access arguments' => array('administer travel content'),
    'file' => 'travel.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // URI for deleting entity instances.
  $items[$base_uri . '/delete'] = array(
    'title callback' => 'travel_label',
    'title arguments' => array($base_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('travel_delete_form', $base_uri_argument_position),
    'access arguments' => array('administer travel content'),
    'file' => 'travel.admin.inc',
  );

  // URI for deleting entity bundles.
  $items['admin/structure/travel/%travel_type/delete'] = array(
    'title' => 'Delete Travel 6 Type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('travel_type_form_delete_confirm', 4),
    'access arguments' => array('administer travel content'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'travel.admin.inc',
  );

  return $items;
}

/**
 * Access callback for travel_type.
 */
function travel_type_access($op, $entity = NULL) {
  return user_access('administer travel content');
}
